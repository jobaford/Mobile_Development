Here’s the **super short and simple version** of your text about **data classes in Kotlin**:

---

### **Data Classes in Kotlin (Simple Version)**

**1. Structural vs Referential Equality:**

* **Structural (`==`)** → checks if **values** are the same.
* **Referential (`===`)** → checks if **objects are the same instance**.

**Example:**

```kotlin
val name1 = "Alex"
val name2 = "Alex"
println(name1 == name2) // true (structural)
println(name1 === name2) // false (different objects)
```

---

**2. Regular Classes vs Equality:**

* By default, `==` on objects checks **referential equality**.
* To check **structural equality** (compare values), you must **override `equals`**, `hashCode`, and `toString`.
* This is **tedious** for classes with many properties.

---

**3. Data Classes:**

* Add `data` keyword → Kotlin **automatically generates**:

  * `equals()` → structural equality
  * `hashCode()` → required with equals
  * `toString()` → readable string of properties
  * `copy()` → clone with optional changes
  * `componentN()` → for destructuring

**Example:**

```kotlin
data class User(val firstName: String, val lastName: String, val age: Int)

val user1 = User("Alex", "Dobin", 23)
val user2 = User("Alex", "Dobin", 23)

println(user1 == user2) // true (structurally equal)
println(user1) // User(firstName=Alex, lastName=Dobin, age=23)
```

✅ **Benefit:** One line of code replaces 30+ lines of manual `equals`, `hashCode`, and `toString`.

---

**4. Optional Properties:**

* Properties declared **outside primary constructor** are **excluded** from generated functions.

---

**Summary:**
Data classes make object comparison, copying, and printing **easy and concise**, automatically handling all the boilerplate code.
